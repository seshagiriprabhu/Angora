; ModuleID = 'palindrome.c'
source_filename = "palindrome.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@.str = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"\09\09Unable to open file\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"\09\09Unable to read file\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [34 x i8] c"\09\09Nope, that's not a palindrome\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [30 x i8] c"\09\09Yes, that's a palindrome!\0A\0A\00", align 1
@__angora_context = common thread_local global i32 0
@__angora_call_site = common thread_local global i32 0

; Function Attrs: nounwind uwtable
define i32 @check_palindrome(i8* nocapture readonly) local_unnamed_addr #0 !dbg !10 {
  %2 = load i32, i32* @__angora_call_site, !nosanitize !2
  %3 = load i32, i32* @__angora_context, !nosanitize !2
  %4 = xor i32 %3, %2, !nosanitize !2
  store i32 %4, i32* @__angora_context, !nosanitize !2
  %5 = alloca [64 x i8], align 16
  call void @llvm.dbg.value(metadata i8* %0, metadata !16, metadata !DIExpression()), !dbg !26
  call void @llvm.dbg.value(metadata i32 -1, metadata !17, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 1, metadata !20, metadata !DIExpression()), !dbg !28
  store i32 222423, i32* @__angora_call_site, !dbg !29, !nosanitize !2
  %6 = tail call i64 @strlen(i8* %0) #8, !dbg !29
  %7 = trunc i64 %6 to i32, !dbg !30
  call void @llvm.dbg.value(metadata i32 %7, metadata !21, metadata !DIExpression()), !dbg !31
  %8 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 0, !dbg !32
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %8) #6, !dbg !32
  call void @llvm.dbg.declare(metadata [64 x i8]* %5, metadata !22, metadata !DIExpression()), !dbg !33
  call void @llvm.dbg.value(metadata i32 0, metadata !18, metadata !DIExpression()), !dbg !34
  %9 = icmp sgt i32 %7, 0, !dbg !35
  %10 = zext i1 %9 to i32, !dbg !38, !nosanitize !2
  %11 = zext i32 %7 to i64, !dbg !38
  %12 = load i32, i32* @__angora_context, !dbg !38, !nosanitize !2
  call void @__angora_trace_cmp_tt(i32 1151279103, i32 %12, i32 4, i32 38, i64 %11, i64 0, i32 %10), !dbg !38, !nosanitize !2
  br i1 %9, label %14, label %13, !dbg !38

; <label>:13:                                     ; preds = %1
  call void @llvm.dbg.value(metadata i32 0, metadata !18, metadata !DIExpression()), !dbg !34
  br label %41, !dbg !39

; <label>:14:                                     ; preds = %1
  %15 = and i64 %6, 4294967295
  br label %16, !dbg !41

; <label>:16:                                     ; preds = %16, %14
  %17 = phi i64 [ 0, %14 ], [ %21, %16 ]
  call void @llvm.dbg.value(metadata i64 %17, metadata !18, metadata !DIExpression()), !dbg !34
  %18 = load i32, i32* @__angora_context, !dbg !43, !nosanitize !2
  call void @__angora_trace_exploit_val_tt(i32 1151268246, i32 %18, i32 8, i32 16416, i64 %17), !dbg !43, !nosanitize !2
  %19 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %17, !dbg !43
  %20 = load i32, i32* @__angora_context, !dbg !44, !nosanitize !2
  call void @__angora_trace_exploit_val_tt(i32 1151279136, i32 %20, i32 8, i32 16415, i8* %19), !dbg !44, !nosanitize !2
  store i8 0, i8* %19, align 1, !dbg !44, !tbaa !45
  %21 = add nuw nsw i64 %17, 1, !dbg !48
  call void @llvm.dbg.value(metadata i32 undef, metadata !18, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !34
  %22 = icmp eq i64 %21, %15, !dbg !35
  %23 = zext i1 %22 to i32, !dbg !38, !nosanitize !2
  %24 = load i32, i32* @__angora_context, !dbg !38, !nosanitize !2
  call void @__angora_trace_cmp_tt(i32 -841129986, i32 %24, i32 8, i32 32, i64 %21, i64 %15, i32 %23), !dbg !38, !nosanitize !2
  br i1 %22, label %25, label %16, !dbg !38, !llvm.loop !49

; <label>:25:                                     ; preds = %16
  call void @llvm.dbg.value(metadata i32 0, metadata !18, metadata !DIExpression()), !dbg !34
  br i1 %9, label %26, label %41, !dbg !39

; <label>:26:                                     ; preds = %25
  %27 = and i64 %6, 4294967295
  br label %28, !dbg !51

; <label>:28:                                     ; preds = %28, %26
  %29 = phi i64 [ 0, %26 ], [ %37, %28 ]
  call void @llvm.dbg.value(metadata i64 %29, metadata !18, metadata !DIExpression()), !dbg !34
  %30 = load i32, i32* @__angora_context, !dbg !51, !nosanitize !2
  call void @__angora_trace_exploit_val_tt(i32 1151281446, i32 %30, i32 8, i32 16416, i64 %29), !dbg !51, !nosanitize !2
  %31 = getelementptr inbounds i8, i8* %0, i64 %29, !dbg !51
  %32 = load i32, i32* @__angora_context, !dbg !51, !nosanitize !2
  call void @__angora_trace_exploit_val_tt(i32 -841122957, i32 %32, i32 8, i32 16414, i8* %31), !dbg !51, !nosanitize !2
  %33 = load i8, i8* %31, align 1, !dbg !51, !tbaa !45
  %34 = load i32, i32* @__angora_context, !dbg !54, !nosanitize !2
  call void @__angora_trace_exploit_val_tt(i32 1151268378, i32 %34, i32 8, i32 16416, i64 %29), !dbg !54, !nosanitize !2
  %35 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %29, !dbg !54
  %36 = load i32, i32* @__angora_context, !dbg !55, !nosanitize !2
  call void @__angora_trace_exploit_val_tt(i32 1151279268, i32 %36, i32 8, i32 16415, i8* %35), !dbg !55, !nosanitize !2
  store i8 %33, i8* %35, align 1, !dbg !55, !tbaa !45
  %37 = add nuw nsw i64 %29, 1, !dbg !56
  call void @llvm.dbg.value(metadata i32 undef, metadata !18, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !34
  %38 = icmp eq i64 %37, %27, !dbg !57
  %39 = zext i1 %38 to i32, !dbg !39, !nosanitize !2
  %40 = load i32, i32* @__angora_context, !dbg !39, !nosanitize !2
  call void @__angora_trace_cmp_tt(i32 1151279235, i32 %40, i32 8, i32 32, i64 %37, i64 %27, i32 %39), !dbg !39, !nosanitize !2
  br i1 %38, label %41, label %28, !dbg !39, !llvm.loop !58

; <label>:41:                                     ; preds = %28, %13, %25
  call void @llvm.dbg.value(metadata i32 0, metadata !18, metadata !DIExpression()), !dbg !34
  call void @llvm.dbg.value(metadata i32 -1, metadata !17, metadata !DIExpression()), !dbg !27
  %42 = load i32, i32* @__angora_context, !dbg !60, !nosanitize !2
  call void @__angora_trace_exploit_val_tt(i32 1151277189, i32 %42, i32 8, i32 16414, i8* %8), !dbg !60, !nosanitize !2
  %43 = load i8, i8* %8, align 16, !dbg !60, !tbaa !45
  %44 = icmp eq i8 %43, 0, !dbg !63
  %45 = zext i1 %44 to i32, !dbg !64, !nosanitize !2
  %46 = zext i8 %43 to i64, !dbg !64
  %47 = load i32, i32* @__angora_context, !dbg !64, !nosanitize !2
  call void @__angora_trace_cmp_tt(i32 1151288079, i32 %47, i32 1, i32 32, i64 %46, i64 0, i32 %45), !dbg !64, !nosanitize !2
  br i1 %44, label %48, label %49, !dbg !64

; <label>:48:                                     ; preds = %41
  call void @llvm.dbg.value(metadata i32 %52, metadata !17, metadata !DIExpression()), !dbg !27
  br label %69, !dbg !65

; <label>:49:                                     ; preds = %41, %49
  %50 = phi i64 [ %53, %49 ], [ 0, %41 ]
  %51 = phi i32 [ %52, %49 ], [ -1, %41 ]
  call void @llvm.dbg.value(metadata i32 %51, metadata !17, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i64 %50, metadata !18, metadata !DIExpression()), !dbg !34
  %52 = add nsw i32 %51, 1, !dbg !66
  %53 = add nuw i64 %50, 1, !dbg !68
  call void @llvm.dbg.value(metadata i32 %52, metadata !17, metadata !DIExpression()), !dbg !27
  call void @llvm.dbg.value(metadata i32 undef, metadata !18, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !34
  %54 = load i32, i32* @__angora_context, !dbg !60, !nosanitize !2
  call void @__angora_trace_exploit_val_tt(i32 -841135728, i32 %54, i32 8, i32 16416, i64 %53), !dbg !60, !nosanitize !2
  %55 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %53, !dbg !60
  %56 = load i32, i32* @__angora_context, !dbg !60, !nosanitize !2
  call void @__angora_trace_exploit_val_tt(i32 1771560113, i32 %56, i32 8, i32 16414, i8* %55), !dbg !60, !nosanitize !2
  %57 = load i8, i8* %55, align 1, !dbg !60, !tbaa !45
  %58 = icmp eq i8 %57, 0, !dbg !63
  %59 = zext i1 %58 to i32, !dbg !64, !nosanitize !2
  %60 = zext i8 %57 to i64, !dbg !64
  %61 = load i32, i32* @__angora_context, !dbg !64, !nosanitize !2
  call void @__angora_trace_cmp_tt(i32 -841103058, i32 %61, i32 1, i32 32, i64 %60, i64 0, i32 %59), !dbg !64, !nosanitize !2
  br i1 %58, label %62, label %49, !dbg !64, !llvm.loop !69

; <label>:62:                                     ; preds = %49
  call void @llvm.dbg.value(metadata i32 %52, metadata !17, metadata !DIExpression()), !dbg !27
  %63 = srem i32 %52, 2, !dbg !71
  %64 = icmp eq i32 %63, 1, !dbg !73
  %65 = zext i1 %64 to i32, !dbg !65, !nosanitize !2
  %66 = zext i32 %63 to i64, !dbg !65
  %67 = load i32, i32* @__angora_context, !dbg !65, !nosanitize !2
  call void @__angora_trace_cmp_tt(i32 1151277321, i32 %67, i32 4, i32 32, i64 %66, i64 1, i32 %65), !dbg !65, !nosanitize !2
  br i1 %64, label %68, label %69, !dbg !65

; <label>:68:                                     ; preds = %62
  call void @llvm.dbg.value(metadata i32 undef, metadata !19, metadata !DIExpression()), !dbg !74
  br label %69, !dbg !75

; <label>:69:                                     ; preds = %48, %68, %62
  %70 = phi i32 [ -1, %48 ], [ %52, %68 ], [ %52, %62 ]
  call void @llvm.dbg.value(metadata i32 undef, metadata !19, metadata !DIExpression()), !dbg !74
  call void @llvm.dbg.value(metadata i32 0, metadata !18, metadata !DIExpression()), !dbg !34
  call void @llvm.dbg.value(metadata i32 1, metadata !20, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i32 1, metadata !20, metadata !DIExpression()), !dbg !28
  call void @llvm.dbg.value(metadata i32 0, metadata !18, metadata !DIExpression()), !dbg !34
  %71 = add i32 %70, -1, !dbg !77
  %72 = sext i32 %71 to i64, !dbg !82
  %73 = load i32, i32* @__angora_context, !dbg !82, !nosanitize !2
  call void @__angora_trace_exploit_val_tt(i32 1151287287, i32 %73, i32 8, i32 16416, i64 %72), !dbg !82, !nosanitize !2
  %74 = getelementptr inbounds [64 x i8], [64 x i8]* %5, i64 0, i64 %72, !dbg !82
  %75 = load i32, i32* @__angora_context, !dbg !82, !nosanitize !2
  call void @__angora_trace_exploit_val_tt(i32 -841105434, i32 %75, i32 8, i32 16414, i8* %74), !dbg !82, !nosanitize !2
  %76 = load i8, i8* %74, align 1, !dbg !82, !tbaa !45
  %77 = icmp eq i8 %43, %76, !dbg !83
  %78 = zext i1 %77 to i32, !dbg !84, !nosanitize !2
  %79 = zext i8 %43 to i64, !dbg !84
  %80 = zext i8 %76 to i64, !dbg !84
  %81 = load i32, i32* @__angora_context, !dbg !84, !nosanitize !2
  call void @__angora_trace_cmp_tt(i32 1151284020, i32 %81, i32 1, i32 32, i64 %79, i64 %80, i32 %78), !dbg !84, !nosanitize !2
  br i1 %77, label %83, label %82, !dbg !84

; <label>:82:                                     ; preds = %69
  call void @llvm.dbg.value(metadata i32 0, metadata !20, metadata !DIExpression()), !dbg !28
  br label %83, !dbg !85

; <label>:83:                                     ; preds = %69, %82
  %84 = phi i32 [ 0, %82 ], [ 1, %69 ], !dbg !87
  call void @llvm.dbg.value(metadata i32 undef, metadata !18, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !34
  call void @llvm.dbg.value(metadata i32 1, metadata !18, metadata !DIExpression()), !dbg !34
  call void @llvm.dbg.value(metadata i32 %84, metadata !20, metadata !DIExpression()), !dbg !28
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %8) #6, !dbg !88
  store i32 %3, i32* @__angora_context, !dbg !89, !nosanitize !2
  ret i32 %84, !dbg !89
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

; Function Attrs: argmemonly nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

; Function Attrs: nounwind uwtable
define i32 @main(i32, i8** nocapture readonly) local_unnamed_addr #0 !dbg !90 {
  %3 = load i32, i32* @__angora_call_site, !dbg !161, !nosanitize !2
  %4 = load i32, i32* @__angora_context, !dbg !161, !nosanitize !2
  %5 = xor i32 %4, %3, !dbg !161, !nosanitize !2
  store i32 %5, i32* @__angora_context, !dbg !161, !nosanitize !2
  call void @llvm.dbg.value(metadata i32 %0, metadata !95, metadata !DIExpression()), !dbg !161
  call void @llvm.dbg.value(metadata i8** %1, metadata !96, metadata !DIExpression()), !dbg !162
  %6 = icmp slt i32 %0, 2, !dbg !163
  %7 = zext i1 %6 to i32, !dbg !165, !nosanitize !2
  %8 = zext i32 %0 to i64, !dbg !165
  %9 = load i32, i32* @__angora_context, !dbg !165, !nosanitize !2
  call void @__angora_trace_cmp_tt(i32 1151274714, i32 %9, i32 4, i32 40, i64 %8, i64 2, i32 %7), !dbg !165, !nosanitize !2
  br i1 %6, label %10, label %11, !dbg !165

; <label>:10:                                     ; preds = %2
  br label %53, !dbg !166

; <label>:11:                                     ; preds = %2
  store i32 369092, i32* @__angora_call_site, !dbg !168, !nosanitize !2
  %12 = tail call noalias i8* @malloc(i64 128) #6, !dbg !168
  call void @llvm.dbg.value(metadata i8* %12, metadata !158, metadata !DIExpression()), !dbg !170
  %13 = icmp eq i8* %12, null, !dbg !171
  %14 = zext i1 %13 to i32, !dbg !172, !nosanitize !2
  %15 = ptrtoint i8* %12 to i64, !dbg !172
  %16 = load i32, i32* @__angora_context, !dbg !172, !nosanitize !2
  call void @__angora_trace_cmp_tt(i32 1151275935, i32 %16, i32 8, i32 32, i64 %15, i64 0, i32 %14), !dbg !172, !nosanitize !2
  br i1 %13, label %17, label %18, !dbg !172

; <label>:17:                                     ; preds = %11
  br label %53, !dbg !173

; <label>:18:                                     ; preds = %11
  %19 = getelementptr inbounds i8*, i8** %1, i64 1, !dbg !174
  %20 = load i32, i32* @__angora_context, !dbg !174, !nosanitize !2
  call void @__angora_trace_exploit_val_tt(i32 1151277123, i32 %20, i32 8, i32 16414, i8** %19), !dbg !174, !nosanitize !2
  %21 = load i8*, i8** %19, align 8, !dbg !174, !tbaa !175
  store i32 510125, i32* @__angora_call_site, !dbg !177, !nosanitize !2
  %22 = tail call %struct._IO_FILE* @fopen(i8* %21, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0)), !dbg !177
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %22, metadata !97, metadata !DIExpression()), !dbg !178
  %23 = icmp eq %struct._IO_FILE* %22, null, !dbg !179
  %24 = zext i1 %23 to i32, !dbg !181, !nosanitize !2
  %25 = ptrtoint %struct._IO_FILE* %22 to i64, !dbg !181
  %26 = load i32, i32* @__angora_context, !dbg !181, !nosanitize !2
  call void @__angora_trace_cmp_tt(i32 1151270655, i32 %26, i32 8, i32 32, i64 %25, i64 0, i32 %24), !dbg !181, !nosanitize !2
  br i1 %23, label %27, label %29, !dbg !181

; <label>:27:                                     ; preds = %18
  store i32 219106, i32* @__angora_call_site, !dbg !182, !nosanitize !2
  %28 = tail call i32 @puts(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0)), !dbg !182
  br label %29, !dbg !184

; <label>:29:                                     ; preds = %18, %27
  store i32 1013619, i32* @__angora_call_site, !dbg !185, !nosanitize !2
  %30 = tail call i64 @fread_unlocked(i8* nonnull %12, i64 1, i64 128, %struct._IO_FILE* %22), !dbg !185
  call void @llvm.dbg.value(metadata i64 %30, metadata !160, metadata !DIExpression()), !dbg !186
  store i32 857648, i32* @__angora_call_site, !dbg !187, !nosanitize !2
  %31 = tail call i32 @fclose(%struct._IO_FILE* %22), !dbg !187
  %32 = icmp ult i64 %30, 128, !dbg !188
  %33 = zext i1 %32 to i32, !dbg !190, !nosanitize !2
  %34 = load i32, i32* @__angora_context, !dbg !190, !nosanitize !2
  call void @__angora_trace_cmp_tt(i32 1151274153, i32 %34, i32 8, i32 36, i64 %30, i64 128, i32 %33), !dbg !190, !nosanitize !2
  br i1 %32, label %35, label %37, !dbg !190

; <label>:35:                                     ; preds = %29
  store i32 344745, i32* @__angora_call_site, !dbg !191, !nosanitize !2
  %36 = tail call i32 @puts(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)), !dbg !191
  br label %53, !dbg !193

; <label>:37:                                     ; preds = %29
  store i32 200750, i32* @__angora_call_site, !dbg !194, !nosanitize !2
  %38 = tail call i32 @check_palindrome(i8* nonnull %12), !dbg !194
  call void @llvm.dbg.value(metadata i32 %38, metadata !159, metadata !DIExpression()), !dbg !195
  %39 = icmp eq i32 %38, 1, !dbg !196
  %40 = zext i1 %39 to i32, !dbg !198, !nosanitize !2
  %41 = zext i32 %38 to i64, !dbg !198
  %42 = load i32, i32* @__angora_context, !dbg !198, !nosanitize !2
  call void @__angora_trace_cmp_tt(i32 1151277651, i32 %42, i32 4, i32 32, i64 %41, i64 1, i32 %40), !dbg !198, !nosanitize !2
  br i1 %39, label %43, label %44, !dbg !198

; <label>:43:                                     ; preds = %37
  store i32 6095, i32* @__angora_call_site, !dbg !199, !nosanitize !2
  tail call void @exit(i32 1) #9, !dbg !199
  unreachable, !dbg !199

; <label>:44:                                     ; preds = %37
  %45 = icmp eq i32 %38, 0, !dbg !201
  %46 = zext i1 %45 to i32, !dbg !203, !nosanitize !2
  %47 = zext i32 %38 to i64, !dbg !203
  %48 = load i32, i32* @__angora_context, !dbg !203, !nosanitize !2
  call void @__angora_trace_cmp_tt(i32 1151285340, i32 %48, i32 4, i32 32, i64 %47, i64 0, i32 %46), !dbg !203, !nosanitize !2
  br i1 %45, label %49, label %51, !dbg !203

; <label>:49:                                     ; preds = %44
  store i32 353628, i32* @__angora_call_site, !dbg !204, !nosanitize !2
  %50 = tail call i32 @puts(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0)), !dbg !204
  br label %53, !dbg !206

; <label>:51:                                     ; preds = %44
  store i32 417893, i32* @__angora_call_site, !dbg !207, !nosanitize !2
  %52 = tail call i32 @puts(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5, i64 0, i64 0)), !dbg !207
  br label %53

; <label>:53:                                     ; preds = %35, %49, %51, %17, %10
  %54 = phi i32 [ 0, %10 ], [ -1, %17 ], [ 0, %51 ], [ 0, %49 ], [ 0, %35 ], !dbg !209
  store i32 %4, i32* @__angora_context, !dbg !210, !nosanitize !2
  ret i32 %54, !dbg !210
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: nounwind
declare noalias %struct._IO_FILE* @fopen(i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @exit(i32) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @__unfold_branch_fn(i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #6

; Function Attrs: nounwind
declare i64 @fread_unlocked(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare void @__angora_trace_cmp_tt(i32, i32, i32, i32, i64, i64, i32) #7

; Function Attrs: nounwind readnone
declare void @__angora_trace_switch_tt(i32, i32, i32, i64, i32, i64*) #7

; Function Attrs: nounwind readonly
declare void @__angora_trace_fn_tt(i32, i32, i32, i8*, i8*) #8

; Function Attrs: nounwind readnone
declare void @__angora_trace_exploit_val_tt(i32, i32, i32, i32, i64) #7

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { argmemonly nounwind }
attributes #3 = { argmemonly nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nounwind readnone }
attributes #8 = { nounwind readonly }
attributes #9 = { noreturn nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!5, !6, !7, !8}
!llvm.ident = !{!9}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 7.0.1 (tags/RELEASE_701/final)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3)
!1 = !DIFile(filename: "palindrome.c", directory: "/home/seshagiri/work/angora/tests/test_dataset/palindrome")
!2 = !{}
!3 = !{!4}
!4 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!5 = !{i32 2, !"Dwarf Version", i32 4}
!6 = !{i32 2, !"Debug Info Version", i32 3}
!7 = !{i32 1, !"wchar_size", i32 4}
!8 = !{i32 7, !"PIC Level", i32 1}
!9 = !{!"clang version 7.0.1 (tags/RELEASE_701/final)"}
!10 = distinct !DISubprogram(name: "check_palindrome", scope: !1, file: !1, line: 14, type: !11, isLocal: false, isDefinition: true, scopeLine: 14, flags: DIFlagPrototyped, isOptimized: true, unit: !0, retainedNodes: !15)
!11 = !DISubroutineType(types: !12)
!12 = !{!4, !13}
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!14 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!15 = !{!16, !17, !18, !19, !20, !21, !22}
!16 = !DILocalVariable(name: "buf", arg: 1, scope: !10, file: !1, line: 14, type: !13)
!17 = !DILocalVariable(name: "len", scope: !10, file: !1, line: 15, type: !4)
!18 = !DILocalVariable(name: "i", scope: !10, file: !1, line: 16, type: !4)
!19 = !DILocalVariable(name: "steps", scope: !10, file: !1, line: 17, type: !4)
!20 = !DILocalVariable(name: "pal", scope: !10, file: !1, line: 18, type: !4)
!21 = !DILocalVariable(name: "n", scope: !10, file: !1, line: 19, type: !4)
!22 = !DILocalVariable(name: "string", scope: !10, file: !1, line: 20, type: !23)
!23 = !DICompositeType(tag: DW_TAG_array_type, baseType: !14, size: 512, elements: !24)
!24 = !{!25}
!25 = !DISubrange(count: 64)
!26 = !DILocation(line: 14, column: 28, scope: !10)
!27 = !DILocation(line: 15, column: 9, scope: !10)
!28 = !DILocation(line: 18, column: 9, scope: !10)
!29 = !DILocation(line: 19, column: 19, scope: !10)
!30 = !DILocation(line: 19, column: 13, scope: !10)
!31 = !DILocation(line: 19, column: 9, scope: !10)
!32 = !DILocation(line: 20, column: 5, scope: !10)
!33 = !DILocation(line: 20, column: 10, scope: !10)
!34 = !DILocation(line: 16, column: 9, scope: !10)
!35 = !DILocation(line: 22, column: 19, scope: !36)
!36 = distinct !DILexicalBlock(scope: !37, file: !1, line: 22, column: 5)
!37 = distinct !DILexicalBlock(scope: !10, file: !1, line: 22, column: 5)
!38 = !DILocation(line: 22, column: 5, scope: !37)
!39 = !DILocation(line: 26, column: 5, scope: !40)
!40 = distinct !DILexicalBlock(scope: !10, file: !1, line: 26, column: 5)
!41 = !DILocation(line: 23, column: 16, scope: !42)
!42 = distinct !DILexicalBlock(scope: !36, file: !1, line: 22, column: 29)
!43 = !DILocation(line: 23, column: 9, scope: !42)
!44 = !DILocation(line: 23, column: 19, scope: !42)
!45 = !{!46, !46, i64 0}
!46 = !{!"omnipotent char", !47, i64 0}
!47 = !{!"Simple C/C++ TBAA"}
!48 = !DILocation(line: 22, column: 25, scope: !36)
!49 = distinct !{!49, !38, !50}
!50 = !DILocation(line: 24, column: 5, scope: !37)
!51 = !DILocation(line: 27, column: 21, scope: !52)
!52 = distinct !DILexicalBlock(scope: !53, file: !1, line: 26, column: 29)
!53 = distinct !DILexicalBlock(scope: !40, file: !1, line: 26, column: 5)
!54 = !DILocation(line: 27, column: 9, scope: !52)
!55 = !DILocation(line: 27, column: 19, scope: !52)
!56 = !DILocation(line: 26, column: 25, scope: !53)
!57 = !DILocation(line: 26, column: 19, scope: !53)
!58 = distinct !{!58, !39, !59}
!59 = !DILocation(line: 28, column: 5, scope: !40)
!60 = !DILocation(line: 30, column: 17, scope: !61)
!61 = distinct !DILexicalBlock(scope: !62, file: !1, line: 30, column: 5)
!62 = distinct !DILexicalBlock(scope: !10, file: !1, line: 30, column: 5)
!63 = !DILocation(line: 30, column: 27, scope: !61)
!64 = !DILocation(line: 30, column: 5, scope: !62)
!65 = !DILocation(line: 34, column: 9, scope: !10)
!66 = !DILocation(line: 31, column: 12, scope: !67)
!67 = distinct !DILexicalBlock(scope: !61, file: !1, line: 30, column: 41)
!68 = !DILocation(line: 30, column: 37, scope: !61)
!69 = distinct !{!69, !64, !70}
!70 = !DILocation(line: 32, column: 5, scope: !62)
!71 = !DILocation(line: 34, column: 13, scope: !72)
!72 = distinct !DILexicalBlock(scope: !10, file: !1, line: 34, column: 9)
!73 = !DILocation(line: 34, column: 17, scope: !72)
!74 = !DILocation(line: 17, column: 9, scope: !10)
!75 = !DILocation(line: 36, column: 5, scope: !76)
!76 = distinct !DILexicalBlock(scope: !72, file: !1, line: 34, column: 23)
!77 = !DILocation(line: 39, column: 41, scope: !78)
!78 = distinct !DILexicalBlock(scope: !79, file: !1, line: 39, column: 13)
!79 = distinct !DILexicalBlock(scope: !80, file: !1, line: 38, column: 36)
!80 = distinct !DILexicalBlock(scope: !81, file: !1, line: 38, column: 5)
!81 = distinct !DILexicalBlock(scope: !10, file: !1, line: 38, column: 5)
!82 = !DILocation(line: 39, column: 26, scope: !78)
!83 = !DILocation(line: 39, column: 23, scope: !78)
!84 = !DILocation(line: 39, column: 13, scope: !79)
!85 = !DILocation(line: 41, column: 9, scope: !86)
!86 = distinct !DILexicalBlock(scope: !78, file: !1, line: 39, column: 47)
!87 = !DILocation(line: 0, scope: !10)
!88 = !DILocation(line: 45, column: 1, scope: !10)
!89 = !DILocation(line: 44, column: 5, scope: !10)
!90 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 48, type: !91, isLocal: false, isDefinition: true, scopeLine: 49, flags: DIFlagPrototyped, isOptimized: true, unit: !0, retainedNodes: !94)
!91 = !DISubroutineType(types: !92)
!92 = !{!4, !4, !93}
!93 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64)
!94 = !{!95, !96, !97, !158, !159, !160}
!95 = !DILocalVariable(name: "argc", arg: 1, scope: !90, file: !1, line: 48, type: !4)
!96 = !DILocalVariable(name: "argv", arg: 2, scope: !90, file: !1, line: 48, type: !93)
!97 = !DILocalVariable(name: "fd", scope: !90, file: !1, line: 50, type: !98)
!98 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !99, size: 64)
!99 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !100, line: 7, baseType: !101)
!100 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "/home/seshagiri/work/angora/tests/test_dataset/palindrome")
!101 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !102, line: 245, size: 1728, elements: !103)
!102 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/libio.h", directory: "/home/seshagiri/work/angora/tests/test_dataset/palindrome")
!103 = !{!104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !124, !125, !126, !127, !131, !133, !135, !139, !142, !144, !146, !147, !148, !149, !153, !154}
!104 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !101, file: !102, line: 246, baseType: !4, size: 32)
!105 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !101, file: !102, line: 251, baseType: !13, size: 64, offset: 64)
!106 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !101, file: !102, line: 252, baseType: !13, size: 64, offset: 128)
!107 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !101, file: !102, line: 253, baseType: !13, size: 64, offset: 192)
!108 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !101, file: !102, line: 254, baseType: !13, size: 64, offset: 256)
!109 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !101, file: !102, line: 255, baseType: !13, size: 64, offset: 320)
!110 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !101, file: !102, line: 256, baseType: !13, size: 64, offset: 384)
!111 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !101, file: !102, line: 257, baseType: !13, size: 64, offset: 448)
!112 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !101, file: !102, line: 258, baseType: !13, size: 64, offset: 512)
!113 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !101, file: !102, line: 260, baseType: !13, size: 64, offset: 576)
!114 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !101, file: !102, line: 261, baseType: !13, size: 64, offset: 640)
!115 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !101, file: !102, line: 262, baseType: !13, size: 64, offset: 704)
!116 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !101, file: !102, line: 264, baseType: !117, size: 64, offset: 768)
!117 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !118, size: 64)
!118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !102, line: 160, size: 192, elements: !119)
!119 = !{!120, !121, !123}
!120 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !118, file: !102, line: 161, baseType: !117, size: 64)
!121 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !118, file: !102, line: 162, baseType: !122, size: 64, offset: 64)
!122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !101, size: 64)
!123 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !118, file: !102, line: 166, baseType: !4, size: 32, offset: 128)
!124 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !101, file: !102, line: 266, baseType: !122, size: 64, offset: 832)
!125 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !101, file: !102, line: 268, baseType: !4, size: 32, offset: 896)
!126 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !101, file: !102, line: 272, baseType: !4, size: 32, offset: 928)
!127 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !101, file: !102, line: 274, baseType: !128, size: 64, offset: 960)
!128 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !129, line: 140, baseType: !130)
!129 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/home/seshagiri/work/angora/tests/test_dataset/palindrome")
!130 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!131 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !101, file: !102, line: 278, baseType: !132, size: 16, offset: 1024)
!132 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!133 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !101, file: !102, line: 279, baseType: !134, size: 8, offset: 1040)
!134 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!135 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !101, file: !102, line: 280, baseType: !136, size: 8, offset: 1048)
!136 = !DICompositeType(tag: DW_TAG_array_type, baseType: !14, size: 8, elements: !137)
!137 = !{!138}
!138 = !DISubrange(count: 1)
!139 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !101, file: !102, line: 284, baseType: !140, size: 64, offset: 1088)
!140 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !141, size: 64)
!141 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !102, line: 154, baseType: null)
!142 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !101, file: !102, line: 293, baseType: !143, size: 64, offset: 1152)
!143 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !129, line: 141, baseType: !130)
!144 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !101, file: !102, line: 301, baseType: !145, size: 64, offset: 1216)
!145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!146 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !101, file: !102, line: 302, baseType: !145, size: 64, offset: 1280)
!147 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !101, file: !102, line: 303, baseType: !145, size: 64, offset: 1344)
!148 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !101, file: !102, line: 304, baseType: !145, size: 64, offset: 1408)
!149 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !101, file: !102, line: 306, baseType: !150, size: 64, offset: 1472)
!150 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !151, line: 62, baseType: !152)
!151 = !DIFile(filename: "/home/seshagiri/installed_apps/clang+llvm/lib/clang/7.0.1/include/stddef.h", directory: "/home/seshagiri/work/angora/tests/test_dataset/palindrome")
!152 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!153 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !101, file: !102, line: 307, baseType: !4, size: 32, offset: 1536)
!154 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !101, file: !102, line: 309, baseType: !155, size: 160, offset: 1568)
!155 = !DICompositeType(tag: DW_TAG_array_type, baseType: !14, size: 160, elements: !156)
!156 = !{!157}
!157 = !DISubrange(count: 20)
!158 = !DILocalVariable(name: "buf", scope: !90, file: !1, line: 51, type: !13)
!159 = !DILocalVariable(name: "result", scope: !90, file: !1, line: 52, type: !4)
!160 = !DILocalVariable(name: "ret", scope: !90, file: !1, line: 67, type: !150)
!161 = !DILocation(line: 48, column: 14, scope: !90)
!162 = !DILocation(line: 48, column: 27, scope: !90)
!163 = !DILocation(line: 54, column: 14, scope: !164)
!164 = distinct !DILexicalBlock(scope: !90, file: !1, line: 54, column: 9)
!165 = !DILocation(line: 54, column: 9, scope: !90)
!166 = !DILocation(line: 55, column: 9, scope: !167)
!167 = distinct !DILexicalBlock(scope: !164, file: !1, line: 54, column: 19)
!168 = !DILocation(line: 58, column: 17, scope: !169)
!169 = distinct !DILexicalBlock(scope: !90, file: !1, line: 58, column: 9)
!170 = !DILocation(line: 51, column: 11, scope: !90)
!171 = !DILocation(line: 58, column: 15, scope: !169)
!172 = !DILocation(line: 58, column: 9, scope: !90)
!173 = !DILocation(line: 59, column: 9, scope: !169)
!174 = !DILocation(line: 61, column: 16, scope: !90)
!175 = !{!176, !176, i64 0}
!176 = !{!"any pointer", !46, i64 0}
!177 = !DILocation(line: 61, column: 10, scope: !90)
!178 = !DILocation(line: 50, column: 11, scope: !90)
!179 = !DILocation(line: 63, column: 10, scope: !180)
!180 = distinct !DILexicalBlock(scope: !90, file: !1, line: 63, column: 9)
!181 = !DILocation(line: 63, column: 9, scope: !90)
!182 = !DILocation(line: 64, column: 9, scope: !183)
!183 = distinct !DILexicalBlock(scope: !180, file: !1, line: 63, column: 14)
!184 = !DILocation(line: 65, column: 5, scope: !183)
!185 = !DILocation(line: 67, column: 18, scope: !90)
!186 = !DILocation(line: 67, column: 12, scope: !90)
!187 = !DILocation(line: 68, column: 5, scope: !90)
!188 = !DILocation(line: 70, column: 13, scope: !189)
!189 = distinct !DILexicalBlock(scope: !90, file: !1, line: 70, column: 9)
!190 = !DILocation(line: 70, column: 9, scope: !90)
!191 = !DILocation(line: 71, column: 9, scope: !192)
!192 = distinct !DILexicalBlock(scope: !189, file: !1, line: 70, column: 20)
!193 = !DILocation(line: 72, column: 9, scope: !192)
!194 = !DILocation(line: 75, column: 14, scope: !90)
!195 = !DILocation(line: 52, column: 9, scope: !90)
!196 = !DILocation(line: 77, column: 16, scope: !197)
!197 = distinct !DILexicalBlock(scope: !90, file: !1, line: 77, column: 9)
!198 = !DILocation(line: 77, column: 9, scope: !90)
!199 = !DILocation(line: 78, column: 9, scope: !200)
!200 = distinct !DILexicalBlock(scope: !197, file: !1, line: 77, column: 22)
!201 = !DILocation(line: 79, column: 23, scope: !202)
!202 = distinct !DILexicalBlock(scope: !197, file: !1, line: 79, column: 16)
!203 = !DILocation(line: 79, column: 16, scope: !197)
!204 = !DILocation(line: 80, column: 9, scope: !205)
!205 = distinct !DILexicalBlock(scope: !202, file: !1, line: 79, column: 29)
!206 = !DILocation(line: 81, column: 5, scope: !205)
!207 = !DILocation(line: 82, column: 9, scope: !208)
!208 = distinct !DILexicalBlock(scope: !202, file: !1, line: 81, column: 12)
!209 = !DILocation(line: 0, scope: !169)
!210 = !DILocation(line: 86, column: 1, scope: !90)
